//C++ -->

/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* removeKthNode(Node* head, int k)
{
    Node* curr = head;
    Node* ahead = head;

    // Move the 'ahead' pointer k steps ahead of the 'curr' pointer
    for (int i = 0; i < k; ++i) {
        if (ahead == nullptr) {
            // If the 'ahead' pointer reaches the end of the list while moving k steps,
            // it means k is greater than the length of the list, so we return the original head.
            return head;
        }
        ahead = ahead->next;
    }

    // If 'ahead' becomes NULL, it means k is equal to the length of the list.
    // In this case, we remove the first node (kth from the end) and return the updated head.
    if (ahead == nullptr) {
        return head->next;
    }

    // Move both 'curr' and 'ahead' pointers simultaneously until 'ahead' reaches the last node.
    while (ahead->next != nullptr) {
        ahead = ahead->next;
        curr = curr->next;
    }

    // 'curr' now points to the node before the kth node from the end.
    // We skip the kth node by updating the 'next' pointer of 'curr'.
    curr->next = curr->next->next;

    // Return the head of the modified linked list.
    return head;
}

//Java -->

