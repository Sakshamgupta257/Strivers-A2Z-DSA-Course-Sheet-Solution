//C++ -->

/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* removeKthNode(Node* head, int k)
{
    Node* curr = head;
    Node* ahead = head;

    // Move the 'ahead' pointer k steps ahead of the 'curr' pointer
    for (int i = 0; i < k; ++i) {
        if (ahead == nullptr) {
            // If the 'ahead' pointer reaches the end of the list while moving k steps,
            // it means k is greater than the length of the list, so we return the original head.
            return head;
        }
        ahead = ahead->next;
    }

    // If 'ahead' becomes NULL, it means k is equal to the length of the list.
    // In this case, we remove the first node (kth from the end) and return the updated head.
    if (ahead == nullptr) {
        return head->next;
    }

    // Move both 'curr' and 'ahead' pointers simultaneously until 'ahead' reaches the last node.
    while (ahead->next != nullptr) {
        ahead = ahead->next;
        curr = curr->next;
    }

    // 'curr' now points to the node before the kth node from the end.
    // We skip the kth node by updating the 'next' pointer of 'curr'.
    curr->next = curr->next->next;

    // Return the head of the modified linked list.
    return head;
}

//Java -->

1.Reverse the original ll.
2.Delete the kth node.
3.Reverse the newLL to display the original ll.


/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;
     public Node prev;

     Node()
     {
         this.data = 0;
         this.next = null;
         this.prev = null;
     }

     Node(int data)
     {
         this.data = data;
         this.next = null;
         this.prev = null;
     }

     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
         this.prev = next;
     }
 };

 *****************************************************************/

public class Solution
{
    public static Node reverseLinkedList(Node head)
    {
        // Write your code here.
        Node prev = null;
        Node curr = head;
        Node next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;

            prev = curr;
            curr = next;
        }

        head = prev;
        return head;
    }
    public static Node removeKthNode(Node head, int K)
    {
        Node newhead = reverseLinkedList(head);
        Node temp = newhead;
        Node prev = newhead;

        int count = 1;
        if(K==1){
            newhead = temp.next;
            return reverseLinkedList(newhead);
        }
        while(count != K){
            if(temp != newhead){
                prev=prev.next;
            }
            temp = temp.next;
            count++;
        }
        prev.next = temp.next;

        return reverseLinkedList(newhead);
    }
}
