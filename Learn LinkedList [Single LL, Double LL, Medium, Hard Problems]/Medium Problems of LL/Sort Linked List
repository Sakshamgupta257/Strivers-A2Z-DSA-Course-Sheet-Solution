//C++ -->

/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* merge(Node* left, Node* right) {
    if (!left) return right;
    if (!right) return left;

    Node* result = NULL;
    if (left->data <= right->data) {
        result = left;
        result->next = merge(left->next, right);
    } else {
        result = right;
        result->next = merge(left, right->next);
    }
    return result;
}

// Function to perform Merge Sort on a linked list
Node* mergeSort(Node* head) {
    if (!head || !head->next) {
        return head;
    }

    // Find the middle of the linked list
    Node* slow = head;
    Node* fast = head->next;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    Node* middle = slow->next;
    slow->next = NULL;

    // Recursively sort both halves
    Node* left = mergeSort(head);
    Node* right = mergeSort(middle);

    // Merge the sorted halves
    return merge(left, right);
}

Node* sortList(Node* head) {
    return mergeSort(head);
}

//Java -->

