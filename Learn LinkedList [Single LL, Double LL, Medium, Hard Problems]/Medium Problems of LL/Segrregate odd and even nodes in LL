//C++ -->

/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* segregateEvenOdd(Node* head)
{
    // Initialize four pointers to keep track of the start and end of even and odd lists
    Node *evenStart = NULL;
    Node *evenEnd = NULL;
    Node *oddStart = NULL;
    Node *oddEnd = NULL;
    
    // Initialize a current node pointer to traverse the linked list starting from the head
    Node *currNode = head;
    
    // Traverse the linked list and segregate even and odd elements into separate lists
    while (currNode != NULL) {
        int val = currNode->data; // Get the value of the current node
        
        // If the value is even
        if (val % 2 == 0) {
            // If evenStart is NULL, set both evenStart and evenEnd to the current node
            if (evenStart == NULL) {
                evenStart = currNode;
                evenEnd = evenStart;
            }
            // Otherwise, append the current node to the end of the even list
            else {
                evenEnd->next = currNode;
                evenEnd = evenEnd->next;
            }
        }
        // If the value is odd
        else {
            // If oddStart is NULL, set both oddStart and oddEnd to the current node
            if (oddStart == NULL) {
                oddStart = currNode;
                oddEnd = oddStart;
            }
            // Otherwise, append the current node to the end of the odd list
            else {
                oddEnd->next = currNode;
                oddEnd = oddEnd->next;
            }
        }
        // Move to the next node in the linked list
        currNode = currNode->next;
    }
    
    // Check if either the even list or odd list is empty
    if (oddStart == NULL || evenStart == NULL) {
        // If either list is empty, return the original head pointer (no rearrangement needed)
        return head;
    }
    
    // Connect the end of the even list to the start of the odd list
    evenEnd->next = oddStart;
    // Mark the end of the odd list as the end of the modified linked list
    oddEnd->next = NULL;
    // Update the head pointer to point to the start of the rearranged even list
    head = evenStart;
    
    // Return the updated head pointer (the rearranged linked list)
    return head;
}

//Java -->

