//C++ -->

/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
     if (!head || k == 0) {
         return head;
     }

     // Step 1: Find the length of the linked list.
     int length = 0;
     Node *current = head;
     while (current) {
         length++;
         current = current->next;
     }
 
    // Step 2: Calculate the effective rotation value.
     int effectiveRotation = k % length;

     if (effectiveRotation == 0) {
         // No rotation is required.
         return head;
     }

     // Step 3: Traverse to the (length - effectiveRotation)th node.
     int stepsToMove = length - effectiveRotation - 1;
     current = head;
     while (stepsToMove > 0) {
         current = current->next;
         stepsToMove--;
     }

     // Step 4: Adjust the pointers to complete the rotation.
     Node *newHead = current->next;
     current->next = nullptr;

     // Traverse to the end of the list to attach the original tail to the original head.
     Node *temp = newHead;
     while (temp->next) {
         temp = temp->next;
     }
     temp->next = head;

     return newHead;
}

****************************************************************************************************************

//Java -->

/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;

     Node()
     {
         this.data = 0;
         this.next = null;
     }

     Node(int data)
     {
         this.data = data;
         this.next = null;
     }

     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 };

 *****************************************************************/

public class Solution {
    public static int length(Node head){
        
        Node temp = head;
        int count = 0;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        return count;

    }
    public static Node rotate(Node head, int k) {
        
        if(head == null || head.next==null)  return head;

        Node temp = head;
        int len = length(head);

        while(temp.next != null){
            temp = temp.next;
        }

        temp.next = head;

        k = k%len;

        int end = len-k;
        while(end-- != 0){
            temp = temp.next;
        }
        head = temp.next;
        temp.next = null;

        return head;
    }
}
