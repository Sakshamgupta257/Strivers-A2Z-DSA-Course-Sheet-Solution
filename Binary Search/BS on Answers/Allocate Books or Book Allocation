//C++ -->

int isPossible(vector<int>& arr, int n , int m, int mid)
{
    int studentCount = 1;
    int pageSum = 0;
    for(int i = 0; i < n; i++)
    {
        if(pageSum + arr[i] <= mid)
        {
            pageSum += arr[i];
        }
        else
        {
            studentCount++;
            if((studentCount > m) || (arr[i] > mid))
            {   
                return false;
            }
            pageSum = arr[i];
        }
    }
    return true;
}
int findPages(vector<int>& arr, int n, int m) {
    if(m>n) return -1;
    int s = 0, sum = 0, ans = -1;
    for(int i = 0; i < n; i++)
    {
        sum += arr[i];
    }
    int e = sum;
    int mid = s + (e-s)/2;
    while(s<e)
    {
        if(isPossible(arr,n,m,mid))
        {   
            ans = mid;
            e = mid;
        }
        else
        {
            s = mid + 1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}

//Java -->

import java.util.*;
public class Solution {
    public static boolean isPossible(List<Integer> arr, int n, int m, int mid) {
        int studentCount = 1;
        int pageSum = 0;
        for (int i = 0; i < n; i++) {
            if (pageSum + arr.get(i) <= mid) {
                pageSum += arr.get(i);
            } else {
                studentCount++;
                if ((studentCount > m) || (arr.get(i) > mid)) {
                    return false;
                }
                pageSum = arr.get(i);
            }
        }
        return true;
    }

    public static int findPages(List<Integer> arr, int n, int m) {
        if (m > n) return -1;
        int s = 0, sum = 0, ans = -1;
        for (int i = 0; i < n; i++) {
            sum += arr.get(i);
        }
        int e = sum;
        int mid = s + (e - s) / 2;
        while (s < e) {
            if (isPossible(arr, n, m, mid)) {
                ans = mid;
                e = mid;
            } else {
                s = mid + 1;
            }
            mid = s + (e - s) / 2;
        }
        return ans;
    }
}
