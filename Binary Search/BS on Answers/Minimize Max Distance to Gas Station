//C++ -->

bool canMinimizeD(const vector<int>& stations, int K, double mid) {
    int count = 0;
    int n = stations.size();

    for (int i = 0; i < n - 1; i++) {
        int distance = stations[i + 1] - stations[i];
        count += distance / mid;

        if (count > K)
            return false;
    }

    return true;
}

double findMinimumD(const vector<int>& stations, int K) {
    int n = stations.size();
    double left = 0.0;
    double right = stations[n - 1] - stations[0];

    while (right - left > 0.01) {
        double mid = (left + right) / 2.0;

        if (canMinimizeD(stations, K, mid))
            right = mid;
        else
            left = mid;
    }

    return right;
}

//Java -->

