//C++ -->

int sumOFdiv(vector<int>& arr, int div){
    int n = arr.size();
    int sum = 0;
    for(int i=0; i<n; i++){
        sum += ceil((double)arr[i] / (double)div);
    }
    return sum;
}

 

int smallestDivisor(vector<int>& arr, int limit)

{
    int low = 1;
    int high = *max_element(arr.begin(), arr.end());
    while(low <= high){
        int mid = low + (high - low) / 2;
        if(sumOFdiv(arr, mid) <= limit){
            high = mid - 1;
        }
        else low = mid + 1;
    }
    return low;
}

//Java -->

public class Solution {

    public static int isPossible(int[] arr, int div){
        int n=arr.length , sum=0;
        for(int i=0; i<n; i++){
           sum += Math.ceil((double)(arr[i])/(double)(div));
        }
        return sum;
    }
    public static int[] findMinMax(int[] arr){
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for(int it : arr){
            min = Math.min(min,it);
            max = Math.max(max,it);
        }
        return new int[]{min , max};
    }
    public static int smallestDivisor(int arr[], int limit) {

       int[] minmax = findMinMax(arr);
       int low = 1, high = minmax[1];

       while(low <= high){
           int mid = (low+high)/2;

           if(isPossible(arr, mid) <= limit ){
               high = mid-1;
           }
           else{
               low = mid+1;
           }
       }
       return low;
    }
}
