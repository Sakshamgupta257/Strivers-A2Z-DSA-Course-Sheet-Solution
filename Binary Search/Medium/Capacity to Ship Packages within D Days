//C++ -->

int sumOFdiv(vector<int>& arr, int div){
    int n = arr.size();
    int sum = 0;
    for(int i=0; i<n; i++){
        sum += ceil((double)arr[i] / (double)div);
    }
    return sum;
}

 

int smallestDivisor(vector<int>& arr, int limit)

{
    int low = 1;
    int high = *max_element(arr.begin(), arr.end());
    while(low <= high){
        int mid = low + (high - low) / 2;
        if(sumOFdiv(arr, mid) <= limit){
            high = mid - 1;
        }
        else low = mid + 1;
    }
    return low;
}

//Java -->

import java.util.*;
public class Solution {
    public static int findDays(int cap,int[] weights){

        int days=1,total=0;

        for(int i=0;i<weights.length;i++){
            if(total + weights[i]>cap){
                days += 1;
                total = weights[i];
            } 
            else{
                total += weights[i];
            }
        }
        return days;
    }
    public static int leastWeightCapacity(int[] weights, int d) {

        int n = weights.length;
        int start = Arrays.stream(weights).max().getAsInt();
        int end = Arrays.stream(weights).sum();

        while(start<=end){
            int mid = (start+end)/2;
            int reqDays = findDays(mid,weights);

            if(reqDays<=d){
                end=mid-1;
            } else{
                start=mid+1;
            }
        }
        return start;
    }
}
