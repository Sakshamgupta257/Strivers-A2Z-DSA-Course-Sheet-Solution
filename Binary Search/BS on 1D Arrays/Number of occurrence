//C++ -->

int First(vector<int>& arr , int n, int x){
    int low = 0 ,high = n-1,first = -1;
    while(low <= high){
        int mid = (low+high)/2;
        if (arr[mid] == x) {
            first = mid;
            high = mid - 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return first;
}

int Last(vector<int>& arr , int n, int x){
    int low = 0 ,high = n-1,last = -1;
    while(low <= high){
        int mid = (low+high)/2;
        if (arr[mid] == x) {
            last = mid;
            low = mid + 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return last;
}

int count(vector<int>& arr, int n, int x) {
    int first = First(arr , n , x);
    if (first == -1) {
      return 0;
    }
    int last = Last (arr , n , x);
    return last - first + 1;
}

//Java -->

public class Solution {
    public static int lowerBound(int []a, int n, int x) {
        int low = 0, high = n-1;
        int first = -1;

        while(low <= high){
            int mid = (low + high)/2;

            if(a[mid] == x){
                first = mid;
                high = mid-1;
            }
            else if(a[mid] < x) {
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return first;
    }

    public static int upperBound(int []a, int x, int n){
        int low = 0, high = n-1;
        int last = -1;

        while(low <= high){
            int mid = (low + high)/2;

            if(a[mid] == x){
                last = mid;
                low = mid+1;
            }
            else if(a[mid] < x) {
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return last;
    }
    public static int count(int arr[], int n, int x) {
       int first = lowerBound(arr, n, x);

       if(first==-1){
           return 0;
       }
       
       int last = upperBound(arr, x, n);

        return last-first+1;
    }
}
