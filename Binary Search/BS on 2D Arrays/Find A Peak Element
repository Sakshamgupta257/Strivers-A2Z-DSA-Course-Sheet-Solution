//C++ -->

#include<bits/stdc++.h>
bool isPeak(vector<vector<int>>& matrix, int row, int col) {
    int rows = matrix.size();
    int cols = matrix[0].size();

    vector<pair<int, int>> neighbors = {{row-1, col}, {row+1, col}, {row, col-1}, {row, col+1}};
    for (const auto& neighbor : neighbors) {
        int r = neighbor.first;
        int c = neighbor.second;
        if (r >= 0 && r < rows && c >= 0 && c < cols && matrix[r][c] > matrix[row][col])
            return false;
    }
    return true;
}
vector<int> findPeakGrid(vector<vector<int>> &matrix){
    int rows = matrix.size();
    int cols = matrix[0].size();

    int startRow = 0;
    int endRow = rows - 1;
    while (startRow <= endRow) {
        int midRow = startRow + (endRow - startRow) / 2;
        int maxCol = max_element(matrix[midRow].begin(), matrix[midRow].end()) - matrix[midRow].begin();
        if (isPeak(matrix, midRow, maxCol))
            return {midRow, maxCol};
        else if (midRow > 0 && matrix[midRow-1][maxCol] > matrix[midRow][maxCol])
            endRow = midRow - 1;
        else
            startRow = midRow + 1;
    }

    return {-1, -1};   
}

//Java -->

public class Solution {
    public static boolean isPeak(int[][] matrix, int row, int col) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        int[][] neighbors = {{row - 1, col}, {row + 1, col}, {row, col - 1}, {row, col + 1}};

        for (int[] neighbor : neighbors) {
            int r = neighbor[0];
            int c = neighbor[1];

            if (r >= 0 && r < rows && c >= 0 && c < cols && matrix[r][c] > matrix[row][col])
                return false;
        }

        return true;
    }

    public static int[] findPeakGrid(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        int startRow = 0;
        int endRow = rows - 1;

        while (startRow <= endRow) {
            int midRow = startRow + (endRow - startRow) / 2;

            int[] row = matrix[midRow];
            int maxCol = 0;

            for (int i = 1; i < cols; i++) {
                if (row[i] > row[maxCol])
                    maxCol = i;
            }

            if (isPeak(matrix, midRow, maxCol))
                return new int[]{midRow, maxCol};
            else if (midRow > 0 && matrix[midRow - 1][maxCol] > matrix[midRow][maxCol])
                endRow = midRow - 1;
            else
                startRow = midRow + 1;
        }

        return new int[]{-1, -1};
    }
}
