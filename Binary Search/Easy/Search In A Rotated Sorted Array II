//C++ -->

bool searchInARotatedSortedArrayII(vector<int>&nums, int target) {
    int n=nums.size();
    int low = 0, high = n - 1;

  while (low <= high) {
    int mid = (low + high) >> 1;
    if (nums[mid] == target)
      return true;
    if(nums[low] == nums[mid] && nums[mid] == nums[high]){
        low = low+1;
        high = high-1;
        continue;
    }
    if (nums[low] <= nums[mid]) {
      if (nums[low] <= target && nums[mid] >= target)
        high = mid - 1;
      else
        low = mid + 1; 
    } else {
      if (nums[mid] <= target && target <= nums[high])
        low = mid + 1;
      else
        high = mid - 1;
    }
  }
  return false;
}

//Java -->

public class Solution {
    public static boolean searchInARotatedSortedArrayII(int []arr, int target) {
        int low = 0, high = arr.length - 1; 

       while (low <= high) { 
          int mid = (low + high) >> 1; 
          if (arr[mid] == target)
          return true; 

          if(arr[low] == arr[mid] && arr[mid] == arr[high]){
              low = low+1;
              high = high-1;
              continue;
          }
          //left sorted array
          if (arr[low] <= arr[mid]) { 
            if (arr[low] <= target && arr[mid] >= target)
               high = mid - 1; 
            else
               low = mid + 1; 
          }
          //right sorted array
          else { 
            if (arr[mid] <= target && target <= arr[high])
                low = mid + 1;
             else
                high = mid - 1;
          }
        }
    return false;
    }
}
