//C++ -->

int search(vector<int>& nums, int n, int target)
{
    int low = 0, high = n - 1;

  while (low <= high) {
    int mid = (low + high) >> 1;
    if (nums[mid] == target)
      return mid;

    if (nums[low] <= nums[mid]) {
      if (nums[low] <= target && nums[mid] >= target)
        high = mid - 1;
      else
        low = mid + 1; 
    } else {
      if (nums[mid] <= target && target <= nums[high])
        low = mid + 1;
      else
        high = mid - 1;
    }
  }
  return -1;
}

//Java -->

import java.util.ArrayList;
public class Solution {
    public static int search(ArrayList<Integer> arr, int n, int target) {
       int low = 0, high = arr.size() - 1; 

       while (low <= high) { 
          int mid = (low + high) >> 1; 
          if (arr.get(mid) == target)
          return mid; 

          if (arr.get(low) <= arr.get(mid)) { 
            if (arr.get(low) <= target && arr.get(mid) >= target)
               high = mid - 1; 
            else
               low = mid + 1; 
          }
          else { 
            if (arr.get(mid) <= target && target <= arr.get(high))
                low = mid + 1;
             else
                high = mid - 1;
          }
        }
    return -1;
   }
}
