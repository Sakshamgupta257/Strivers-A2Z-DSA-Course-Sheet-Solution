//C++ -->

vector<int> spiralMatrix(vector<vector<int>>&mat) {
    vector<int> ans;
    int n = mat.size();
    int m = mat[0].size();
    int top = 0, left = 0, bottom = n - 1, right = m - 1;
    while (top <= bottom && left <= right) {
        for (int i = left; i <= right; i++) {
            ans.push_back(mat[top][i]);
        }
        top++;
        for (int i = top; i <= bottom; i++) {
            ans.push_back(mat[i][right]);
        }
        right--;
        if (top <= bottom) {
            for (int i = right; i >= left; i--) {
                ans.push_back(mat[bottom][i]);
            }
        bottom--;
        }
        if (left <= right) {
            for (int i = bottom; i >= top; i--) {
                ans.push_back(mat[i][left]);
            }
        left++;
        }
    }
    return ans;
}

//Java -->

import java.util.*;
public class Solution {
    public static int[] spiralMatrix(int [][]mat) {
        int n = mat.length;
        int m = mat[0].length;
        int left = 0, right = m-1;
        int top = 0, bottom = n-1;

        int[] ans = new int[n*m];
        int k=0;

        while(top <= bottom && left <= right){
            for(int i=left; i<=right; i++){
                ans[k] = mat[top][i];
                k++;
            }
            top++;
            for (int i = top; i <= bottom; i++){
                ans[k] = mat[i][right];
                k++;
            }
            right--;

            if (top <= bottom) {
                for (int i = right; i >= left; i--){
                    ans[k] = mat[bottom][i];
                    k++;
                }
                bottom--;
            }

            if (left <= right) {
                for (int i = bottom; i >= top; i--){
                    ans[k] = mat[i][left];
                    k++;
                }
                left++;
            }
        }
        return ans;
    }
}
