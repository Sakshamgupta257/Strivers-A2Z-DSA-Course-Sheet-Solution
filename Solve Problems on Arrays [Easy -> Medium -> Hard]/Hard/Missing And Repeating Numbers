//C++ -->

vector<int> findMissingRepeatingNumbers(vector < int > a) {
    long long n = a.size();
    long long SN = (n * (n + 1)) / 2;
    long long S2N = (n * (n + 1) * (2 * n + 1)) / 6;
    long long S = 0, S2 = 0;
    for (int i = 0; i < n; i++) {
        S += a[i];
        S2 += (long long)a[i] * (long long)a[i];
    }
    long long val1 = S - SN;
    long long val2 = S2 - S2N;
    val2 = val2 / val1;
    long long x = (val1 + val2) / 2;
    long long y = x - val1;

    return {(int)x, (int)y};
}

//Java -->

public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
        long n = a.length;

        long sn = (n * (n+1)) / 2;
        long s2n = (n * (n+1) * (2*n+1)) / 6;
        long s=0, s2=0;

        for (int i=0; i<n; i++){
            s += a[i];
            s2 += (long)a[i] * (long)a[i];
        }

        long val1 = s-sn;
        long val2 = s2-s2n;
        val2 = val2 / val1;
        long x = (val1 + val2) / 2;
        long y = x - val1;

        int[] ans = {(int) x, (int) y};
        return ans;
    }
}
