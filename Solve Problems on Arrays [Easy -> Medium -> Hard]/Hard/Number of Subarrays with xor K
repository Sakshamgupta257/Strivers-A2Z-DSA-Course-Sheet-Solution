//C++ -->

#include "bits/stdc++.h"
int subarraysWithSumK(vector < int > a, int k) {
    int xr=0,cnt=0;
    map<int,int> mpp;
    mpp[xr]++;
    for(int i=0;i<a.size();i++){
        xr=xr^a[i];
        int x=xr^k;
        cnt+=mpp[x];
        mpp[xr]++;
    }
    return cnt;
}

//Java -->

import java.util.*;
public class Solution {
    public static int subarraysWithSumK(int []a, int k) {
        int n = a.length; 
        int xr = 0;
        Map<Integer, Integer> mpp = new HashMap<>();
        mpp.put(xr, 1); 
        int cnt = 0;

        for (int i = 0; i < n; i++) {
            xr = xr ^ a[i];
            int x = xr ^ k;

            if (mpp.containsKey(x)) {
                cnt += mpp.get(x);
            }

            if (mpp.containsKey(xr)) {
                mpp.put(xr, mpp.get(xr) + 1);
            } else {
                mpp.put(xr, 1);
            }
        }
        return cnt;
    }
}
