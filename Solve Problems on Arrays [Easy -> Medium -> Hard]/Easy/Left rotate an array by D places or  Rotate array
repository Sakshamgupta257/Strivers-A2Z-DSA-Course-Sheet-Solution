//C++ -->

1. Time complexity: O(N+K) || Space Complexity: O(K)

#include <bits/stdc++.h> 
#include <iostream>
using namespace std;

int main() {
    int N;
    cin>>N;
    int arr[N];
    for(int i=0;i<N;i++){
        cin>>arr[i];
    }
    int K;
    cin>>K;
    int temp[K];
    //Store in Temp
    for(int i=0;i<K;i++){
        temp[i]=arr[i];
    }
    //Shifting
    for(int i=K;i<N;i++){
        arr[i-K]=arr[i];
    }
    //Placing back in Array from Temp
    for(int i=N-K;i<N;i++){
        arr[i]=temp[i-(N-K)];
    }
    //Print elemnts of Array
    for(int i=0;i<N;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}
2. Time complexity: O(2N) || Space Complexity: O(1)

#include <bits/stdc++.h> 
#include <iostream>
using namespace std;

int main() {
    int N;
    cin>>N;
    int arr[N];
    for(int i=0;i<N;i++){
        cin>>arr[i];
    }
    int K;
    cin>>K;
    int temp[K];
    //Reverse
    reverse(arr,arr+K);
    reverse(arr+K,arr+N);
    reverse(arr,arr+N);
    //Print elemnts of Array
    for(int i=0;i<N;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}

//Java -->

1. Time complexity: O(N+K) || Space Complexity: O(K)

import java.util.* ;
import java.io.*; 
class Solution {
	
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int arr[] = new int[n];
		for(int i=0; i<n; i++){
            arr[i]=sc.nextInt();
		}
		int d = sc.nextInt();
		
		int temp[] = new int[d];
		//store in temp
		for(int i=0; i<d; i++){
			temp[i] = arr[i];
		}
        //shifting
		for(int i=d; i<n; i++){
			arr[i-d] = arr[i]; 
		}
        //put temp in arr
		for(int i=n-d; i<n; i++){
			arr[i] = temp[i-(n-d)];
		}
		

		//print the elements
		for(int i=0; i<n; i++){
			System.out.print(arr[i] + " ");
		}
	}
}

2. Time complexity: O(2N) || Space Complexity: O(1)

import java.util.* ;
import java.io.*; 
class Solution {
	public static void reverse(int arr[] , int start, int end){
        while(start <= end){
			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
			start++;
			end--;
		}
	}
	public static void rotate(int[] arr, int n, int d) {

      reverse(arr, 0, n-d-1);
    
      reverse(arr, n-d, n-1);
    
      reverse(arr, 0, n-1);
  }
	public static void main(String args[]) {

		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int arr[] = new int[n];
		for(int i=0; i<n; i++){
            arr[i]=sc.nextInt();
		}
		int d = sc.nextInt();

        rotate(arr, n, d);
	//print the elements
		for(int i=0; i<n; i++){
			System.out.print(arr[i] + " ");
		}
	}
}
