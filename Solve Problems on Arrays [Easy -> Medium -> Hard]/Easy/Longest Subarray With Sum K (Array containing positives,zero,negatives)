//C++ -->

#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& a, int k){
    map<long long,int> premap;
    long long sum=0;
    int maxLen=0;
    for(int i=0;i<a.size();i++){
        sum+=a[i];
        if(sum==k){
            maxLen=max(maxLen, i+1);
        }
        long long rem=sum-k;
        if(premap.find(rem)!=premap.end()){
            int len=i-premap[rem];
            maxLen=max(maxLen,len);
        }
        if(premap.find(sum)==premap.end()){
            premap[sum]=i;
        }
    }
    return maxLen;
}

//Java -->

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		Map<Long , Integer> preSumMap = new HashMap<>();
		long  sum = 0;
		int maxLen = 0;
		for(int i=0; i<nums.length; i++){
			sum += nums[i];
			if(sum == k){
				maxLen = Math.max(maxLen, i+1);
			}
			long  rem = sum - k;
			if(preSumMap.containsKey(rem)){
				int len = i-preSumMap.get(rem);
				maxLen = Math.max(maxLen , len);
			}
			if (!preSumMap.containsKey(sum)){
				preSumMap.put(sum,i);
			}
		}
		return maxLen;
	}
}
