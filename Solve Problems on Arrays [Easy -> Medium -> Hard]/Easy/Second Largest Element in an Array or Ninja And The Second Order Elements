//C++ -->
#include <bits/stdc++.h>
using namespace std;
int secondLargest(vector<int> &arr , int n){
    int sLargest = INT_MIN;
    int largest = arr[0];
    for(int i = 1 ; i < n ; i++){
        if(arr[i] > largest){
            sLargest = largest;
            largest = arr[i];
        }
        else if(arr[i] < largest && arr[i] > sLargest){
            sLargest = arr[i];
        }
    }
    return sLargest;
}
int secodnSamllest(vector<int> &arr , int n){
    int sSmallest =  INT_MAX;
    int smallest = arr[0];
    for(int i = 1 ; i < n; i++){
        if(arr[i] < smallest){
            sSmallest = smallest;
            smallest = arr[i];
        }
        else if(arr[i] > smallest && arr[i] < sSmallest){
            sSmallest = arr[i];
        }
    }
    return sSmallest;
}
vector<int> getSecondOrderElements(int n, vector<int> a) {
    int sLargest =secondLargest(a,n);
    int sSmallest =secodnSamllest(a , n);
    return {sLargest , sSmallest};
}
//Java -->
import java.io.*;
public class Solution {
    public static int secondLargest(int arr[], int n){
    int sLargest = Integer.MIN_VALUE;
    int largest = arr[0];
    for(int i = 1 ; i < n ; i++){
        if(arr[i] > largest){
            sLargest = largest;
            largest = arr[i];
        }
        else if(arr[i] < largest && arr[i] > sLargest){
            sLargest = arr[i];
        }
    }
    return sLargest;
   }
   public static int secodnSamllest(int arr[], int n){
    int sSmallest =  Integer.MAX_VALUE;
    int smallest = arr[0];
    for(int i = 1 ; i < n; i++){
        if(arr[i] < smallest){
            sSmallest = smallest;
            smallest = arr[i];
        }
        else if(arr[i] > smallest && arr[i] < sSmallest){
            sSmallest = arr[i];
        }
    }
    return sSmallest;
    }
    public static int[] getSecondOrderElements(int n, int []a) {
        int sLargest =secondLargest(a,n);
        int sSmallest =secodnSamllest(a , n);
        int[] array = new int[]{sLargest,sSmallest};
        return array;
    }
}
