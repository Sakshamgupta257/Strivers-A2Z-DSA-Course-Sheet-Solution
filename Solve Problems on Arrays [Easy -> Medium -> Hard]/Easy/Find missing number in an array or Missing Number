//C++ -->

1. Optimal solution using SUM

int missingNumber(vector<int>&a, int n) {
    int sum2=0,sum1=(n*(n+1))/2;
    for(int i=0;i<n-1;i++){
        sum2=sum2+a[i];
    }
    int ans=sum1-sum2;
    return ans;
}

2. Optimal solution using XOR

int missingNumber(vector<int>&a, int n) {
    int xor1=0,xor2=0;
    for(int i=0;i<n-1;i++){
        xor2=xor2^a[i];
        xor1=xor1^(i+1);
    }
    xor1=xor1^n;
    int ans=xor1^xor2;
    return ans;
}

//Java -->

1. Optimal solution using SUM

public class Solution {
    public static int missingNumber(int []a, int N) {
        //sum
        int sum = (N*(N+1))/2;
        int s2 = 0;
        for(int i=0; i<N; i++){
            s2 += a[i];
        }
        return (sum - s2);
    }
}

2. Optimal solution using XOR

public class Solution {
    public static int missingNumber(int []a, int N) {     
        //XOR
        int xor1 = 0, xor2 = 0;
        for(int i=0; i<N-1; i++){
            xor2 = xor2 ^ a[i];
            xor1 = xor1 ^ (i+1);
        }
            xor1 = xor1 ^ N;
            
        return (xor1 ^ xor2);
    }
}
